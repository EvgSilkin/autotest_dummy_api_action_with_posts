{"name": "test_adding_post_by_filling_invalid_data", "status": "broken", "statusDetails": {"message": "AttributeError: 'Response' object has no attribute 'read'", "trace": "@allure.description(\"Adding post by filling all fields in request body with invalid data\")\n    def test_adding_post_by_filling_invalid_data():\n        json_body = {\n                        \"text\": 2023,\n                        \"image\": 2023,\n                        \"likes\": \"test\",\n                        \"tags\": 2023,\n                        \"owner\": 123\n                    }\n        result_post: Response = Dummy_post_api.create_post(json_body)\n        Checking.assert_status_code(result_post, 400)\n        print(result_post.text)\n        expected_keys = [\"error\", \"data\"]\n        Checking.check_equal_json_keys(result_post, expected_keys)\n        Checking.check_json_value(result_post, expected_keys[0], \"BODY_NOT_VALID\")\n>       print(json.load(result_post).get(\"data\"))\n\ntests\\test_action_post.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = <Response [400]>, cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def load(fp, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n>       return loads(fp.read(),\n            cls=cls, object_hook=object_hook,\n            parse_float=parse_float, parse_int=parse_int,\n            parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\nE       AttributeError: 'Response' object has no attribute 'read'\n\nC:\\Python39\\lib\\json\\__init__.py:293: AttributeError"}, "description": "Adding post by filling all fields in request body with invalid data", "steps": [{"name": "POST", "status": "passed", "start": 1677179748686, "stop": 1677179749481}], "attachments": [{"name": "stdout", "source": "4263e493-d9ac-4e66-9e81-db7e83e5cd60-attachment.txt", "type": "text/plain"}], "start": 1677179748686, "stop": 1677179749481, "uuid": "b8c4be42-9bd9-4bca-8214-090942fbcf5d", "historyId": "9118a74fd3dd31376085569bed3b14da", "testCaseId": "b0077dd3b2338a448df0008e72fda26f", "fullName": "tests.test_action_post#test_adding_post_by_filling_invalid_data", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_action_post"}, {"name": "host", "value": "DESKTOP-NUHQ5FA"}, {"name": "thread", "value": "4812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_action_post"}]}